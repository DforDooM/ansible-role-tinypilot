#!/bin/bash

# Exit on unset variable.
set -u

print_help() {
  cat << EOF
Usage: ${0##*/} [-h] new_hostname
Change the hostname of this machine.
  -h Display this help and exit.
EOF
}

# Parse command-line arguments.
while getopts "h" opt; do
  case $opt in
    h)
      print_help
      exit
      ;;
    *)
      print_help >&2
      exit 1
  esac
done

# Ensure 'new_hostname' is given.
shift $(($OPTIND - 1))
if [[ ! $@ ]]; then
  echo "Input parameter missing: new_hostname"
  exit 1
fi

# Validate 'new_hostname' parameter.
# See here for the rules:
# https://man7.org/linux/man-pages/man7/hostname.7.html
NEW_HOSTNAME="$1"
VALID_HOSTNAME_PATTERN='^[-0-9A-Za-z]+$'
if ! [[ "$NEW_HOSTNAME" =~ $VALID_HOSTNAME_PATTERN ]] \
  || [[ "$NEW_HOSTNAME" == -* ]] \
  || [[ "$NEW_HOSTNAME" == "localhost" ]] \
  || [[ ${#NEW_HOSTNAME} -gt 63 ]] \
  ; then
  echo "Invalid hostname"
  exit 1
fi

MARKER_START="# AUTOGENERATED BY TINYPILOT <<<<<"
MARKER_END="# >>>>> AUTOGENERATED BY TINYPILOT"

# Retrieve original `/etc/hosts`.
# - Read file line by line, make sure to preserve all whitespace.
# - Remove all marker sections.
ETC_HOSTS_ORIGINAL=()
IS_IN_MARKER_SECTION=false
while IFS= read line; do
  if $IS_IN_MARKER_SECTION && [[ "$line" == "$MARKER_END" ]]; then
    IS_IN_MARKER_SECTION=false
    continue
  fi
  if $IS_IN_MARKER_SECTION || [[ "$line" == "$MARKER_START" ]]; then
    IS_IN_MARKER_SECTION=true
    continue
  fi
  ETC_HOSTS_ORIGINAL+=("$line")
done < /etc/hosts

if $IS_IN_MARKER_SECTION; then
  echo "Unclosed marker section"
  exit 1
fi

# Populate new hostname to system files.
OLD_ETC_HOSTS=$(printf "%s\n" "${ETC_HOSTS_ORIGINAL[@]}")
NEW_MARKER_SECTION="$MARKER_START\n127.0.1.1 $NEW_HOSTNAME\n$MARKER_END"
printf "$NEW_MARKER_SECTION\n$OLD_ETC_HOSTS\n" > /etc/hosts
echo $NEW_HOSTNAME > /etc/hostname
